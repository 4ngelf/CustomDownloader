# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  integration:
    environment: CI
    runs-on: ubuntu-latest
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-tags: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install system dependencies
      uses: tlambert03/setup-qt-libs@v1
    - name: Install poetry
      env:
        POETRY_HOME: /opt/poetry
        POETRY_VERSION: ${{ vars.PYTHON_POETRY_VERSION }}
      run: |
        python3 -m venv $POETRY_HOME
        $POETRY_HOME/bin/pip install --upgrade pip
        $POETRY_HOME/bin/pip install poetry=="$POETRY_VERSION"
        echo "$POETRY_HOME/bin" >> $GITHUB_PATH
    - name: Check pyproject.toml
      run: poetry check
    - name: Install dependencies
      run: poetry install
    - name: Prepare application
      run: poetry run invoke prepare
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: poetry run pytest
    # TODO: Put here build workflow
    
    - name: Create release if needed
      run: poetry run semantic-release version --print
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
